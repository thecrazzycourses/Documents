Git Revert:
----------
https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit

# Resets index to former commit; replace '56e05fced' with your commit code
git reset 7286d6a66de014188fdf9f5aed99c6f055eb6fb6 

# Moves pointer back to previous HEAD
git reset --soft HEAD@{1}

git commit -m "Revert to 7286d6a66"

# Updates working copy to reflect the new commit
git reset --hard


----------------------------------------------------------------------------------------------------------------

Git Init :

git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/repo-name.git
git push -u origin master

----------------------------------------------------------------------------------------------------------------

Create Team:
------------
Git :
Org Level Create Team: Team -> New Team --> Add People
Org Level ---> Member Privileges --> unchecked : Repository creation, unchecked : Repository deletion, checked : Repository visibility change, checked : Repository forking
			   Repository permissions : Organization members : Read
Repository --> Settings --> Collaborators & Team ---> Teams : Here you will see the your team , give Write permissions
Repository --> Settings --> Branches --> Branch protection rules (Select Master) :
			   1. check Protect this branch
			   2. check Require pull request reviews before merging
			   3. check Dismiss stale pull request approvals when new commits are pushed
			   4. uncheck Require review from Code Owners
			   5. uncheck Restrict who can dismiss pull request reviews
			   6. check Require status checks to pass before merging
			   7. check Require branches to be up to date before merging
			   8. uncheck Require signed commits
			   9. uncheck Include administrators
			   10. Restrict who can push to this branch : Add admin/maintianer msid here
Add maintianer : In Org level --> people change Role

----------------------------------------------------------------------------------------------------------------

Git Flow:
---------
git flow init ( This will ask for couple of questions like develop,feature,release ... branch names)
git push origin --all
git flow feature start featute-name
	once feature is complete : git add .
							   git commit -m "fetaure completed"
							   git push origin
							   git push --set-upstream origin feature/feature-name 
							   From Next Time
							   git push (Daily at end of day)
git flow feature finish (So once you complete your feature. This will merge all your code to develop branch)
						(This will delete your feature branch and merge to develop branch)
git push origin
git push --set-upstream origin develop
Now we want to release this feature to prodution
git flow release start 1.0.1
Increase your project version (from 1.0.0 to 1.0.1)
git flow release finish ( This will ask for tag : 1.0.1)
From above ( Release branch merge to master, release was tagged 1.0.1, release branch has been back merge to develop, 
release branch locally deleted)
git checkout master
git push origin --all --follow-tags

-------------------------------------------------------------------------------------------------------------------

Git Best Way:
------------
Creating a feature branch :
$ git checkout -b myfeature develop
Switched to a new branch "myfeature"

Incorporating a finished feature on develop :
$ git checkout develop
Switched to branch 'develop'

$ git merge --no-ff myfeature
Updating ea1b82a..05e9557
(Summary of changes)
The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. 
This avoids losing information about the historical existence of a feature branch and groups together all commits that together 
added the feature.

$ git branch -d myfeature
Deleted branch myfeature (was 05e9557).

$ git push origin develop

Creating a release branch :
$ git checkout -b release-1.2 develop
Switched to a new branch "release-1.2"

$ ./bump-version.sh 1.2
Files modified successfully, version bumped to 1.2.
Here, bump-version.sh is a fictional shell script that changes some files in the working copy to reflect the new version.

$ git commit -a -m "Bumped version number to 1.2"
[release-1.2 74d9424] Bumped version number to 1.2
1 files changed, 1 insertions(+), 1 deletions(-)

Finishing a release branch : 
$ git checkout master
Switched to branch 'master'

$ git merge --no-ff release-1.2
Merge made by recursive.
(Summary of changes)

$ git tag -a 1.2

To keep the changes made in the release branch, we need to merge those back into develop, though. In Git:
$ git checkout develop
Switched to branch 'develop'

$ git merge --no-ff release-1.2
Merge made by recursive.
(Summary of changes)

$ git branch -d release-1.2
Deleted branch release-1.2 (was ff452fe).

Hotfix branches :

Creating the hotfix branch : 
$ git checkout -b hotfix-1.2.1 master
Switched to a new branch "hotfix-1.2.1"

$ ./bump-version.sh 1.2.1
Files modified successfully, version bumped to 1.2.1.

$ git commit -a -m "Bumped version number to 1.2.1"
[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1
1 files changed, 1 insertions(+), 1 deletions(-)

$ git commit -m "Fixed severe production problem"
[hotfix-1.2.1 abbe5d6] Fixed severe production problem
5 files changed, 32 insertions(+), 17 deletions(-)

Finishing a hotfix branch  : 

$ git checkout master
Switched to branch 'master'

$ git merge --no-ff hotfix-1.2.1
Merge made by recursive.
(Summary of changes)

$ git tag -a 1.2.1

$ git checkout develop
Switched to branch 'develop'
$ git merge --no-ff hotfix-1.2.1
Merge made by recursive.
(Summary of changes)

$ git branch -d hotfix-1.2.1
Deleted branch hotfix-1.2.1 (was abbe5d6).